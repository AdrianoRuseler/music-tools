function songData = readSongTable(dbPath, varargin)
% READSONGTABLE Read data from Song table in SQLite database
%
% Syntax:
%   songData = readSongTable(dbPath)
%   songData = readSongTable(dbPath, Name, Value)
%
% Inputs:
%   dbPath - Full path to SQLite database file
%
% Optional Name-Value Pairs:
%   'WhereClause' - SQL WHERE clause (default: '')
%   'Columns' - Cell array of column names to select (default: all)
%   'OrderBy' - Column name to order results by (default: '')
%   'Limit' - Maximum number of rows to return (default: inf)
%
% Output:
%   songData - Table containing the requested data
%
% Example:
%   songs = readSongTable('music.db');
%   songs = readSongTable('music.db', 'WhereClause', 'Tempo > 120');
%   songs = readSongTable('music.db', 'Columns', {'ArtistName', 'SongName', 'Tempo'});

    % Parse input arguments
    p = inputParser;
    addRequired(p, 'dbPath', @ischar);
    addParameter(p, 'WhereClause', '', @ischar);
    addParameter(p, 'Columns', {}, @iscell);
    addParameter(p, 'OrderBy', '', @ischar);
    addParameter(p, 'Limit', inf, @isnumeric);
    parse(p, dbPath, varargin{:});
    
    % Check if database file exists
    if ~isfile(dbPath)
        error('Database file not found: %s', dbPath);
    end
    
    % Connect to database
    conn = sqlite(dbPath, 'readonly');
    
    try
        % Build SELECT clause with COALESCE to handle NULLs
        if isempty(p.Results.Columns)
            % Convert NULLs to appropriate default values for each column type
            selectFields = {
                'Id', ...
                'COALESCE(File, '''') AS File', ...
                'COALESCE(FilePathHash, '''') AS FilePathHash', ...
                'COALESCE(ArtistName, '''') AS ArtistName', ...
                'COALESCE(SongName, '''') AS SongName', ...
                'COALESCE(Comment, '''') AS Comment', ...
                'COALESCE(Tempo, 0.0) AS Tempo', ...
                'COALESCE(OverallVolume, 0.0) AS OverallVolume', ...
                'COALESCE(OverallEnergy, 0) AS OverallEnergy', ...
                'COALESCE(EnergySegmentsCount, 0) AS EnergySegmentsCount', ...
                'COALESCE(StandardPitch, 0.0) AS StandardPitch', ...
                'COALESCE(KeyResultSummary, '''') AS KeyResultSummary', ...
                'COALESCE(DateAdded, '''') AS DateAdded', ...
                'COALESCE(ClippedPeaksCount, 0) AS ClippedPeaksCount', ...
                'Artwork', ...
                'COALESCE(LastAnalyzedUtc, '''') AS LastAnalyzedUtc', ...
                'COALESCE(Genre, '''') AS Genre', ...
                'COALESCE(Album, '''') AS Album', ...
                'COALESCE(Grouping, '''') AS Grouping', ...
                'COALESCE(Year, 0) AS Year', ...
                'COALESCE(MainKey, '''') AS MainKey', ...
                'COALESCE(MainKeyConfidence, 0.0) AS MainKeyConfidence', ...
                'COALESCE(SecondKey, '''') AS SecondKey', ...
                'COALESCE(SecondKeyConfidence, 0.0) AS SecondKeyConfidence', ...
                'COALESCE(IsAnalyzed, 0) AS IsAnalyzed', ...
                'COALESCE(HasPNTag, 0) AS HasPNTag', ...
                'COALESCE(PNTagIsProcessed, 0) AS PNTagIsProcessed', ...
                'COALESCE(PNTagAppliedClipRepair, 0) AS PNTagAppliedClipRepair', ...
                'COALESCE(PNTagVolumeAnalysisVersion, 0) AS PNTagVolumeAnalysisVersion', ...
                'COALESCE(PNTagVolumeUnits, '''') AS PNTagVolumeUnits', ...
                'COALESCE(PNTagOutputVolume, 0.0) AS PNTagOutputVolume', ...
                'COALESCE(LastModifiedUtc, '''') AS LastModifiedUtc', ...
                'COALESCE(OverallVolumeRMS1, 0.0) AS OverallVolumeRMS1', ...
                'COALESCE(OverallVolumeRMS2, 0.0) AS OverallVolumeRMS2', ...
                'COALESCE(OverallVolumeLUFS, 0.0) AS OverallVolumeLUFS', ...
                'COALESCE(DiskIsRemovable, 0) AS DiskIsRemovable', ...
                'COALESCE(DiskLabel, '''') AS DiskLabel', ...
                'COALESCE(DiskSerialNumber, '''') AS DiskSerialNumber', ...
                'COALESCE(Label, '''') AS Label', ...
                'COALESCE(Remixer, '''') AS Remixer', ...
                'COALESCE(Composer, '''') AS Composer', ...
                'COALESCE(FileType, '''') AS FileType', ...
                'COALESCE(FileSize, 0) AS FileSize', ...
                'COALESCE(Bitrate, 0) AS Bitrate', ...
                'COALESCE(SampleRate, 0) AS SampleRate', ...
                'COALESCE(Rating, 0) AS Rating'
            };
            selectClause = strjoin(selectFields, ', ');
        else
            selectClause = strjoin(p.Results.Columns, ', ');
        end
        
        % Build SQL query
        query = sprintf('SELECT %s FROM Song', selectClause);
        
        % Add WHERE clause
        if ~isempty(p.Results.WhereClause)
            query = sprintf('%s WHERE %s', query, p.Results.WhereClause);
        end
        
        % Add ORDER BY clause
        if ~isempty(p.Results.OrderBy)
            query = sprintf('%s ORDER BY %s', query, p.Results.OrderBy);
        end
        
        % Add LIMIT clause
        if isfinite(p.Results.Limit)
            query = sprintf('%s LIMIT %d', query, p.Results.Limit);
        end
        
        % Execute query
        songData = fetch(conn, query);
        
        % Convert to table if not already
        if ~istable(songData)
            songData = cell2table(songData);
        end
        
        % Close connection
        close(conn);
        
    catch ME
        % Ensure connection is closed on error
        close(conn);
        rethrow(ME);
    end
end